
def predictAnswer(stockData, queries):
    ret = [-1]*len(queries)
    hashmap = {}
    stocklen = len(stockData)
    left_idx_arr = [stocklen-1]
    right_idx_arr = [0]
    for i, day in enumerate(queries):        
        if hashmap.get(day) is not None:
            ret[i] = hashmap.get(day)
            continue
        target_val = stockData[day-1]            
        r = day
        l = day - 2            
        for idx in right_idx_arr:
            if day < idx:
                r = idx
        for idx in left_idx_arr:
            if day > idx:
                l = idx
        
        while l >= 0 or r < stocklen:
            if l >= 0 and stockData[l] < target_val and(r >= stocklen or (day-1 - l <= r - day +1)):
                ret[i] = l + 1
                left_idx_arr.append(l)
                break
            if r < stocklen and stockData[r] < target_val:
                ret[i] = r + 1
                right_idx_arr.append(r)
                break
            l -= 1
            r += 1            
        
        hashmap[day] = ret[i]
        
    return ret

    # ret = [-1]*len(queries)
    # for i, day in enumerate(queries):
    #     l = day - 2
    #     r = day        
    #     while (l >= 0 or r < len(stockData)):
    #         if l >=0 and stockData[l] < stockData[day-1]:
    #             ret[i] = l+1
    #             break
    #         if r < len(stockData) and stockData[r] < stockData[day-1]:
    #             ret[i] = r+1
    #             break
    #         l -= 1        
    #         r += 1            
    # return ret

    #  ret = [-1]*len(queries)
    # for i, day in enumerate(queries):
    #     l = day - 2
    #     r = day
    #     print('day: '+str(day))
    #     while l >= 0 or r < len(stockData):
    #         print('l: '+str(l))
    #         print('r: '+str(r))
    #         if l >=0:
    #             if stockData[l] < stockData[day-1]:
    #                 ret[i] = l + 1
    #                 break
    #             else:
    #                 l -= 1
    #         if r < len(stockData):
    #             if stockData[r] < stockData[day-1]:
    #                 ret[i] = r + 1
    #                 break
    #             else:
    #                 r += 1            
    # return ret


if __name__ == '__main__':
    # fptr = open(os.environ['OUTPUT_PATH'], 'w')

    # stockData_count = int(input().strip())

    # stockData = []

    # for _ in range(stockData_count):
    #     stockData_item = int(input().strip())
    #     stockData.append(stockData_item)

    # queries_count = int(input().strip())

    # queries = []

    # for _ in range(queries_count):
    #     queries_item = int(input().strip())
    #     queries.append(queries_item)

    print(predictAnswer([7784462,
8075762,
3794145,
4403846,
4731672,
7782461,
4908645,
6068517,
6220433,
4619793,
7511289,
1233503,
3626895,
8409726,
9521923,
5815640,
3121375,
5870948,
7832291,
7716346,
8403579,
6699683,
744898,
7712350,
589163,
6863205,
6188341,
4379930,
4615270,
9017890,
7001870,
2399732,
9610004,
3312366,
9319929,
4341675,
3611178,
6744925,
2926544,
2347962,
1364717,
437832,
3581464,
4991612,
1363909,
3103386,
807251,
7001636,
1490685,
1155893,
7234333,
2410615,
7855576,
7979230,
2639316,
961090,
4842435,
8827656,
5341019,
1974056,
361898,
4859240,
6890139,
9971901,
687957,
6210068,
6829927,
4299134,
5471344,
9756470,
6647095,
6836061,
2710653,
228558,
4344024,
4074562,
5848295,
5151274,
3592549,
7338979,
8823519,
826881,
2265946,
6679094,
1322463,
4905261,
7640183,
8681249,
3732917,
5497553,
3171656,
4094814,
2873145,
61795,
6583066,
3561101,
8788214,
3412992,
7860235,
4259557,
5685814,
4507329,
1095617,
8396466,
7252239,
7955992,
4987379,
3100533,
5623618,
1096279,
2955864,
4447136,
4439512,
5221809,
3642581,
5761974,
2643421,
3799115,
6959574,
8892689,
9296667,
131229,
5503854,
2169811,
193023,
2086919,
8247264,
8981236,
8016263,
6107498,
5757145,
3702076,
3131178,
9369113,
2098541,
383416,
7325105,
9602272,
6000301,
2948722,
698550,
8956164,
7395857,
5138061,
6694324,
3554789,
900034,
1854096,
7353903,
375959,
746785,
6650569,
507188,
6250638,
1336732,
700210,
853909,
9583995,
2197798,
8870171,
8207844,
471294,
2572246,
1339021,
9840406,
7187138,
1722437,
9681862,
6789409,
7722737,
2630583,
4311,
9195252,
2542791,
5142371,
8405927,
6097579,
8558757,
2776374,
3451481,
8934715,
3523158,
2618402,
9441902,
2290148,
6471485,
2658464,
3144056,
8571831,
7372613,
2014226,
6779674,
360258,
7102823,
8118694,
200663,
4289960,
2357482,
9882525,
3595721,
2596570,
5029459,
3600031,
4308173,
88602,
1258753,
2714099,
6186180,
2333861,
8006825,
2154013,
1268576,
1529982,
7288766,
3226829,
3820129,
6276602,
8401644,
9480536,
4848432,
8290608,
1494761,
1628105,
8650865,
1113935,
2263150,
1367880,
7920247,
4620632,
3766756,
4032319,
7217201,
1312566,
7632349,
1525374,
1401167,
1407453,
6755824,
103699,
3741314,
4762648,
4774063,
7526241,
8808982,
4579180,
3269421,
5145462,
855781,
1671065,
4625998,
5704212,
2478024,
8637110,
9848668,
3645241,
9751045,
2111817,
7529472,
187643,
6732448,
1296227,
4219961,
6466001,
2608792,
4368661,
7991374,
6526311,
5776113,
7263549,
6630009,
2033778,
4542549,
3920423,
9560018,
3351530,
8499602,
2829439,
8496991,
9355382,
7016855,
5639340,
7575945,
2011230,
6792802,
7424612,
5656470,
9060198,
9536428,
3185941,
9247840,
8785228,
6998519,
3467800,
7767580,
2123663,
7836460,
8275305,
8649973,
6128924,
5538853,
7796333,
8162702,
81401,
1716755,
239071,
5949282,
216356,
5584861,
6962625,
2088089,
5118067,
2601964,
9664033,
7129297,
9394765,
7088644,
5302118,
8454962,
9141423,
8488059,
219153,
443002,
8002929,
3686952,
8210581,
126591,
4039763,
9002237,
1292915,
168687,
4541090,
9089247,
8331388,
7138842,
3322353,
1086810,
5604476,
3538708,
6671671,
2567100,
8143148,
1789737,
5169063,
7807180,
8919033,
7080180,
4895823,
4221151,
8051493,
6553598,
5225561,
8270646,
6996599,
3228489,
1957597,
7723532,
5871432,
5997360,
6725768,
7164346,
8682398,
3783209,
8769945,
9530137,
3438403,
2092297,
616946,
9042878,
8147357,
7288616,
1609977,
6290504,
9078353,
9295391,
6614036,
513737,
8891922,
1509858,
7251239,
6943415,
579807,
2476799,
5214060,
7576406,
8221640,
9688008,
7816289,
4093071,
8201719,
7058408,
3773768,
9400468,
841617,
5060064,
8930604,
4280019,
7152361,
9547550,
5839248,
7816069,
6836165,
7449224,
6622924,
8430869,
9260966,
3236959,
1460958,
8152888,
7263169,
8712196,
5096302,
7842975,
3705347,
2826713,
7935732,
1926986,
5031072,
5752020,
8536408,
5749143,
5326780,
4826527,
5149610,
6168396,
9886591,
4080214,
2964766,
9555303,
3627763,
1320365,
7371371,
2980279,
1285940,
6510646,
3927500,
546905,
2263957,
5388457,
8699792,
9527125,
4100652,
6312445,
9886451,
7805998,
1655509,
7822183,
2249335,
6686581,
6090554,
785742,
4952075,
1417333,
8128621,
101684,
102080,
8015211,
6698249,
5583197,
7570513,
326011,
6903561,
7458235,
5822642,
8189500,
3968880,
9750141,
1252757,
6232836,
7654949,
9952548,
8276312,
1755600,
8781345,
8162763,
2077950,
436853,
8501297,
4327284,
9639785,
7108202,
7629378,
4591859,
1041887,
5757998,
7209895,
1143966,
3773208,
3908143,
9243515,
3860072,
6750506,
8663427,
1318306,
2573147,
9369279,
5287185,
4839639,
622035,
4036373,
2494587,
3090934,
4829036,
6766538,
1872278,
5508150,
8844487,
2309131,
6525798,
5688123,
1948915,
3634000,
3317500,
9057126,
4675886,
1591849,
6267020,
8336203,
7881408,
175162,
7579717,
1741479,
9442019,
8759496,
3059784,
2015165,
8128774,
863320,
9371155,
1267160,
7416044,
1865741,
4358093,
4761432,
1148631,
6230371,
269581,
9993117,
1055853,
6795379,
8197591,
3004767,
2945730,
4031442,
4578244,
7621615,
5623290,
845263,
5957817,
6021049,
3536777,
6053886,
7762527,
2978795,
4813381,
3338662,
7510312,
5458506,
6718334,
6881466,
6725665,
6650729,
1263559,
1083757,
1412160,
2412189,
9830479,
4198093,
4921657,
886331,
993471,
3119248,
6407450,
3939200,
7150689,
985693,
4077166,
5290331,
1830956,
2551334,
1311379,
7884084,
8605219,
1590258,
862878,
5934951,
4928919,
8373189,
3909808,
4163604,
7771007,
635472,
814333,
1550917,
4235581,
2226492,
3963105,
4066059,
6424584,
1401113,
4952390,
9934406,
4520360,
1359839,
6389957,
4187401,
4861883,
2983474,
9477731,
9209190,
5534808,
3305461,
7093273,
4140026,
4895718,
472503,
2591329,
2340989,
1362043,
6501136,
6504592,
9133049,
9652960,
7318924,
683965,
6404892,
2061768,
7163421,
470950,
1002703,
1080886,
7939691,
3453461,
8117597,
1815881,
2359769,
2304997,
6677764,
5343243,
4299079,
5886953,
878050,
7604540,
5496578,
5018075,
2500257,
5969080,
125755,
7357597,
7331122,
9143243,
3862189,
8980523,
8796202,
3697464,
9664487,
5201093,
5759231,
9344260,
8188394,
9278286,
425145,
8644437,
2731746,
8542741,
460317,
5091514,
3364090,
9654432,
2951108,
7663168,
8057737,
3829157,
7784059,
3554314,
1363584,
2800668,
9523393,
1489338,
158264,
6854514,
632580,
4020452,
5835036,
1945133,
234268,
8015875,
9662577,
8509850,
9876486,
7850971,
7788135,
2817982,
9011759,
3036232,
3877074,
9472075,
644098,
7241163,
1642859,
3595205,
7420683,
9700595,
7424362,
5204741,
3254908,
1304297,
8005408,
5294652,
2793634,
680024,
4665517,
5942566,
7216827,
3016905,
404050,
7451094,
1032779,
66627,
5960944,
3425616,
433949,
6265430,
6243597,
9445707,
9301662,
120670,
1434133,
9945759,
9878185,
3076991,
6057315,
7298867,
5293937,
5998028,
5019959,
1065196,
7302324,
3025367,
6359847,
2612310,
3705390,
1025364,
1071227,
922216,
4042268,
1475276,
889662,
7591398,
1541902,
6850605,
1017013,
4492202,
3116034,
9776961,
3937908,
4934047,
9897630,
5372041,
4879805,
9775814,
965383,
3453472,
9591032,
6259320,
9451499,
4610991,
7324515,
9270175,
152709,
6200714,
1882484,
6374450,
9742429,
2953710,
9813017,
6301048,
6945337,
702678,
3892445,
1003591,
7553282,
7425809,
5495792,
3185668,
9719121,
9433700,
8119714,
9616750,
7322092,
5515871,
1908916,
8287474,
8969342,
4016299,
7063145,
937192,
8627289,
4387660,
207366,
8779997,
3104725,
4606201,
5154446,
2847153,
76262,
4967463,
9148200,
7021599,
8186492,
5556996,
8025189,
8256126,
5499156,
6037332,
1441793,
5218276,
7987383,
2077858,
7351377,
7825826,
7593728,
1776644,
6113300,
9079421,
5792943,
5692796,
2532965,
4420231,
80455,
5256682,
5716580,
3185179,
9862883,
3387377,
8548683,
9939144,
871191,
7696882,
9477094,
9057683,
5770229,
18634,
7313808,
1269384,
6055966,
1271952,
9004011,
4043348,
3349809,
6355388,
1869174,
3459889,
648383,
498825,
5055661,
6441325,
6191620,
104977,
3377908,
8788427,
5361659,
9094487,
4489957,
5224541,
4998215,
3038640,
5163684,
5869406,
3251873,
7157130,
7443440,
1538454,
7175763,
4757247,
5324189,
3231728,
8545550,
4328200,
9791428,
4411710,
3199939,
4176953,
387950,
3848321,
7192129,
5443611,
2805998,
3383748,
5548587,
6183905,
4688526,
3426597,
7794743,
1694835,
8651137,
2792957,
4733474,
6331173,
1178714,
501698,
3488302,
8622153,
4556503,
664064,
5895751,
9880692,
6412144,
4441300,
6725243,
6203571,
8853010,
2441533,
2896875,
9240959,
8806205,
89003,
7200921,
1612202,
5989102,
5265860,
312458,
677628,
8692456,
623552,
2372462,
9859945,
3416509,
9622287,
6191117,
7111574,
2640336,
2195770,
5733727,
7196839,
5376185,
1629477,
9593882,
1788328,
6070777,
6319124,
7991898,
7440138,
8760656,
3405124,
9197448,
7566860,
3494126,
6398369,
1695414,
9483228,
4180580,
4524223,
2677207,
5389387,
5147775,
7566020,
5249331,
8564283,
7188306,
3956799,
8192208,
2344993,
6152568,
3925934,
2058183,
1528753,
5555411,
1652064,
5833432,
4142539,
7971187,
3825330,
1582676,
9248194,
9746805,
3296475,
9331406,
3240931,
9694843,
1026819,
5240510,
6391774,
5551041,
7917716,
1781161,
698815,
8000087,
9546843,
1779449,
7704744,
3503642,
2488009,
49736,
2172561,
6413942,
2107919,
6217665,
4485704,
3759982,
2051097], [
242,
521,
778,
269,
714,
582,
744,
119,
864,
938,
289,
373,
64,
682,
440,
224,
848,
526,
418,
649,
269,
59,
657,
5,
972,
950,
275,
636,
654,
256,
732,
247,
128,
861,
516,
842,
443,
611,
312]))

    # fptr.write('\n'.join(map(str, result)))
    # fptr.write('\n')

    # fptr.close()